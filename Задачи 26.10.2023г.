ЗАДАЧА 1

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ParallelTaskExecutor {
    public static void main(String[] args) {
        ExecutorService executorService = Executors.newFixedThreadPool(3);
        executorService.execute(() -> {
            System.out.println("exercise 1");
        });
        executorService.execute(() -> {
            System.out.println("exercise 2");
        });
        executorService.execute(() -> {
            System.out.println("exercise 3");
        });

        executorService.shutdown();
    }
}


------------------------------------------------------------------------------------

ЗАДАЧА 2

import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class PrimeNumberSearch {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("beggining of enterval ");
        int start = scanner.nextInt();
        System.out.print("end of the enterval  ");
        int end = scanner.nextInt();
        int numThreads = 4; // numbers of nishka
        int intervalSize = (end - start + 1) / numThreads;
        ExecutorService executorService = Executors.newFixedThreadPool(numThreads);
        for (int i = 0; i < numThreads; i++) {
            int subStart = start + i * intervalSize;
            int subEnd = subStart + intervalSize - 1;
            if (i == numThreads - 1) {
                subEnd = end;
            }
            Runnable task = new PrimeNumberSearchTask(subStart, subEnd);
            executorService.execute(task);
        }
        executorService.shutdown();
    }
}

class PrimeNumberSearchTask implements Runnable {
    private final int start;
    private final int end;
    public PrimeNumberSearchTask(int start, int end) {
        this.start = start;
        this.end = end;
    }
    @Override
    public void run() {
        System.out.println("searching for pryme numbers [" + start + ", " + end + "]");
        for (int number = start; number <= end; number++) {
            if (isPrime(number)) {
                System.out.println(number + " it`s pryme number");
            }
        }
    }
    private boolean isPrime(int number) {
        if (number <= 1) {
            return false;
        }
        if (number <= 3) {
            return true;
        }
        if (number % 2 == 0 || number % 3 == 0) {
            return false;
        }
        for (int i = 5; i * i <= number; i += 6) {
            if (number % i == 0 || number % (i + 2) == 0) {
                return false;
            }
        }
        return true;
    }
}



--------------------------------------------------------------------------------------

ЗАДАЧА 3

import java.util.concurrent.ExecutorService;
import java.util.Scanner;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class ExecutorExampleTree {
    public static void main(String[] args) {
        int a = 10, b = 20;
        System.out.println("А е равно на " + a +", a B e равно на" + b);
        System.out.println("Започваме изчакване...");
        try {
            TimeUnit.SECONDS.sleep(3);
        }
        catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("Край на изчакването.");
        a = 30;
        b = 40;
        System.out.println("А е равно на " + a +", a B e равно на " + b);
    }
}
